numero <- round(max(melt_dots$value + 0.1), digits = 1)
numero2 <- round(min(melt_dots$value - 0.1), digits = 1)
ggplot() +
geom_bar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge", stat="identity", color="black") +
geom_errorbar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge",stat="identity") +
geom_point(data=melt_dots,pch=21, colour="black", aes(fill=melt_dots$variable ,group=melt_dots$variable, y=melt_dots$value,x=melt_dots$saturange), position=position_jitterdodge(jitter.width=0.1, dodge.width=0.9)) +
scale_fill_manual(values= c("white", "grey50", color)) +
labs(x = "number of double bonds", y = "log2 FC (MKC8866 vs control)", element_text(face = "bold", angle = 0)) +
ylim(-1, 1) +
geom_hline(yintercept = 0, linetype="dashed", size = 2)
}
lenghtplot = function(lipido, color) {
ooo <- subset(final_avg, final_avg$Lipid_Class == lipido)
uuu <- summary(ooo$lenght)
ooo$saturange <- NA
ooo$saturange[ooo$lenght <= round(uuu[[2]])] <- paste( "<" , round(uuu[[2]]))
ooo$saturange[ooo$lenght > round(uuu[[2]])] <- paste(round(uuu[[2]]),"-", round(uuu[[3]]))
ooo$saturange[ooo$lenght > round(uuu[[3]])] <- paste(round(uuu[[3]]),"-", round(uuu[[5]]))
ooo$saturange[ooo$lenght >= round(uuu[[5]])] <- paste( ">" , round(uuu[[5]]))
average_tri <- ddply(ooo,21,numcolwise(mean))
average_tri$se24 <- c(sd(ooo$DvsM24[ooo$saturange == paste( "<" , round(uuu[[2]]))]), sd(ooo$DvsM24[ooo$saturange == paste(round(uuu[[2]]),"-", round(uuu[[3]]))]), sd(ooo$DvsM24[ooo$saturange == paste(round(uuu[[3]]),"-", round(uuu[[5]]))]), sd(ooo$DvsM24[ooo$saturange == paste( ">" , round(uuu[[5]]))]))
average_tri$se48 <- c(sd(ooo$DvsM24[ooo$saturange == paste( "<" , round(uuu[[2]]))]), sd(ooo$DvsM48[ooo$saturange == paste(round(uuu[[2]]),"-", round(uuu[[3]]))]), sd(ooo$DvsM48[ooo$saturange == paste(round(uuu[[3]]),"-", round(uuu[[5]]))]), sd(ooo$DvsM48[ooo$saturange == paste( ">" , round(uuu[[5]]))]))
average_tri$se72 <- c(sd(ooo$DvsM24[ooo$saturange == paste( "<" , round(uuu[[2]]))]), sd(ooo$DvsM72[ooo$saturange == paste(round(uuu[[2]]),"-", round(uuu[[3]]))]), sd(ooo$DvsM72[ooo$saturange == paste(round(uuu[[3]]),"-", round(uuu[[5]]))]), sd(ooo$DvsM72[ooo$saturange == paste( ">" , round(uuu[[5]]))]))
melt2 <- melt(average_tri, id.vars = 1, measure.vars = 14:16)
melt3 <- melt(average_tri, id.vars = 1, measure.vars = 19:21)
melt_todo <- cbind(melt2, melt3[,3])
melt_todo$variable <- gsub("DvsM24", "24h", melt_todo$variable)
melt_todo$variable <- gsub("DvsM48", "48h", melt_todo$variable)
melt_todo$variable <- gsub("DvsM72", "72h", melt_todo$variable)
melt_dots <- melt(ooo, id.vars = 21, measure.vars = 16:18)
melt_dots$variable <- gsub("DvsM24", "24h", melt_dots$variable)
melt_dots$variable <- gsub("DvsM48", "48h", melt_dots$variable)
melt_dots$variable <- gsub("DvsM72", "72h", melt_dots$variable)
numero <- round(max(melt_dots$value + 0.1), digits = 1)
numero2 <- round(min(melt_dots$value - 0.1), digits = 1)
melt_todo$saturange <- factor(melt_todo$saturange, levels = c(paste( "<" , round(uuu[[2]])), paste(round(uuu[[2]]),"-", round(uuu[[3]])), paste(round(uuu[[3]]),"-", round(uuu[[5]])), paste( ">" , round(uuu[[5]]))))
ggplot() +
geom_bar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge", stat="identity", color="black") +
geom_errorbar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge",stat="identity") +
geom_point(data=melt_dots,pch=21, colour="black", aes(fill=melt_dots$variable ,group=melt_dots$variable, y=melt_dots$value,x=melt_dots$saturange), position=position_jitterdodge(jitter.width=0.1, dodge.width=0.9)) +
scale_fill_manual(values= c("white", "grey50", color)) +
labs(x = "number of carbons", y = "log2 FC (MKC8866 vs control)", element_text(face = "bold", angle = 0)) +
ylim(-1, 1) +
geom_hline(yintercept = 0, linetype="dashed", size = 2)
}
# For TAGs
unique(final_avg$Lipid_Class)
satuplot("Fatty Acid"  , "limegreen"  )
lenghtplot("Fatty Acid"  , "limegreen"  )
satuplot("Fatty Acid"  , "limegreen"  )
satuplot("Triacylglyceride"  , "orange"  )
lenghtplot("Triacylglyceride"  , "orange"  )
lenghtplot("Triacylglyceride"  , "orange"  )
satuplot("Diacylglycerol"  , "blue"  )
lenghtplot("Diacylglycerol"  , "blue"  )
satuplot("Phosphatidylcholine"  , "plum"  )
lenghtplot("Phosphatidylcholine"  , "plum"  )
ooo <- subset(final_avg, final_avg$Lipid_Class == "Diacylglycerol" )
ooo <- subset(final_avg, final_avg$Lipid_Class == "Diacylglycerol")
summary(ooo$lenght)
ooo$saturange <- NA
ooo$saturange[ooo$lenght <= 35] <- paste( 34)
ooo$saturange[ooo$lenght <= 35] <- "34"
ooo$lenght
ooo$saturange[ooo$lenght == 34] <- "34"
ooo$saturange[ooo$lenght > 34] <- "36"
ooo$saturange[ooo$lenght > 36] <- "38"
ooo$saturange[ooo$lenght > 38] <- "40+"
colnames(ooo)[21]
average_tri <- ddply(ooo,21,numcolwise(mean))
average_tri$se24 <- c(sd(ooo$DvsM24[ooo$saturange == "34"]), sd(ooo$DvsM24[ooo$saturange == "36"]), sd(ooo$DvsM24[ooo$saturange == "38"]), sd(ooo$DvsM24[ooo$saturange == "40+"]))
average_tri$se48 <- c(sd(ooo$DvsM24[ooo$saturange == "34"]), sd(ooo$DvsM48[ooo$saturange == "36"]), sd(ooo$DvsM48[ooo$saturange == "38"]), sd(ooo$DvsM48[ooo$saturange == "40+"]))
average_tri$se72 <- c(sd(ooo$DvsM24[ooo$saturange == "34"]), sd(ooo$DvsM72[ooo$saturange == "36"]), sd(ooo$DvsM72[ooo$saturange == "38"]), sd(ooo$DvsM72[ooo$saturange == "40+"]))
dim(average_tri)
melt2 <- melt(average_tri, id.vars = 1, measure.vars = 14:16)
melt3 <- melt(average_tri, id.vars = 1, measure.vars = 19:21)
melt_todo <- cbind(melt2, melt3[,3])
melt_todo$variable <- gsub("DvsM24", "24h", melt_todo$variable)
melt_todo$variable <- gsub("DvsM48", "48h", melt_todo$variable)
melt_todo$variable <- gsub("DvsM72", "72h", melt_todo$variable)
melt_dots <- melt(ooo, id.vars = 21, measure.vars = 16:18)
melt_dots$variable <- gsub("DvsM24", "24h", melt_dots$variable)
melt_dots$variable <- gsub("DvsM48", "48h", melt_dots$variable)
melt_dots$variable <- gsub("DvsM72", "72h", melt_dots$variable)
melt_todo$saturange <- factor(melt_todo$saturange, levels = c( "34", "36" ,"38" , "40+"))
ggplot() +
geom_bar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge", stat="identity", color="black") +
geom_errorbar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge",stat="identity") +
geom_point(data=melt_dots,pch=21, colour="black", aes(fill=melt_dots$variable ,group=melt_dots$variable, y=melt_dots$value,x=melt_dots$saturange), position=position_jitterdodge(jitter.width=0.1, dodge.width=0.9)) +
scale_fill_manual(values= c("white", "grey50", color)) +
labs(x = "number of carbons", y = "log2 FC (MKC8866 vs control)", element_text(face = "bold", angle = 0)) +
ylim(-1, 1) +
geom_hline(yintercept = 0, linetype="dashed", size = 2)
ggplot() +
geom_bar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge", stat="identity", color="black") +
geom_errorbar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge",stat="identity") +
geom_point(data=melt_dots,pch=21, colour="black", aes(fill=melt_dots$variable ,group=melt_dots$variable, y=melt_dots$value,x=melt_dots$saturange), position=position_jitterdodge(jitter.width=0.1, dodge.width=0.9)) +
scale_fill_manual(values= c("white", "grey50", "blue")) +
labs(x = "number of carbons", y = "log2 FC (MKC8866 vs control)", element_text(face = "bold", angle = 0)) +
ylim(-1, 1) +
geom_hline(yintercept = 0, linetype="dashed", size = 2)
satuplot("Diacylglycerol"  , "plum"  )
ooo <- subset(final_avg, final_avg$Lipid_Class == "Diacylglycerol")
unique(ooo$saturation)
ooo$saturation
ooo$saturange <- NA
ooo$saturange[ooo$saturation == 1] <-  "1"
ooo$saturange[ooo$saturation == 2] <-  "2"
ooo$saturange[ooo$saturation >= 3] <-  "3+"
average_tri$se24 <- c(sd(ooo$DvsM24[ooo$saturange == "1"]), sd(ooo$DvsM24[ooo$saturange == "2"]), sd(ooo$DvsM24[ooo$saturange == "3+"]))
dim(average_tri)
average_tri$saturange
ooo <- subset(final_avg, final_avg$Lipid_Class == "Diacylglycerol")
unique(ooo$saturation)
ooo$saturange <- NA
ooo$saturange[ooo$saturation == 1] <-  "1"
ooo$saturange[ooo$saturation == 2] <-  "2"
ooo$saturange[ooo$saturation >= 3] <-  "3+"
average_tri <- ddply(ooo,21,numcolwise(mean))
average_tri$se24 <- c(sd(ooo$DvsM24[ooo$saturange == "1"]), sd(ooo$DvsM24[ooo$saturange == "2"]), sd(ooo$DvsM24[ooo$saturange == "3+"]))
average_tri$se48 <- c( sd(ooo$DvsM48[ooo$saturange == "1"]), sd(ooo$DvsM48[ooo$saturange == "2"]), sd(ooo$DvsM48[ooo$saturange == "3+"]))
average_tri$se72 <- c( sd(ooo$DvsM72[ooo$saturange == "1"]), sd(ooo$DvsM72[ooo$saturange == "2"]), sd(ooo$DvsM72[ooo$saturange == "3+"]))
melt2 <- melt(average_tri, id.vars = 1, measure.vars = 14:16)
melt3 <- melt(average_tri, id.vars = 1, measure.vars = 19:21)
melt_todo <- cbind(melt2, melt3[,3])
melt_todo$variable <- gsub("DvsM24", "24h", melt_todo$variable)
melt_todo$variable <- gsub("DvsM48", "48h", melt_todo$variable)
melt_todo$variable <- gsub("DvsM72", "72h", melt_todo$variable)
melt_dots <- melt(ooo, id.vars = 21, measure.vars = 16:18)
melt_dots$variable <- gsub("DvsM24", "24h", melt_dots$variable)
melt_dots$variable <- gsub("DvsM48", "48h", melt_dots$variable)
melt_dots$variable <- gsub("DvsM72", "72h", melt_dots$variable)
ggplot() +
geom_bar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge", stat="identity", color="black") +
geom_errorbar(data=melt_todo, aes(fill=melt_todo$variable, y=melt_todo$value,x=melt_todo$saturange,ymin=melt_todo$value-melt_todo$`melt3[, 3]`,ymax=melt_todo$value+melt_todo$`melt3[, 3]`), position="dodge",stat="identity") +
geom_point(data=melt_dots,pch=21, colour="black", aes(fill=melt_dots$variable ,group=melt_dots$variable, y=melt_dots$value,x=melt_dots$saturange), position=position_jitterdodge(jitter.width=0.1, dodge.width=0.9)) +
scale_fill_manual(values= c("white", "grey50", "blue")) +
labs(x = "number of double bonds", y = "log2 FC (MKC8866 vs control)", element_text(face = "bold", angle = 0)) +
ylim(-1, 1) +
geom_hline(yintercept = 0, linetype="dashed", size = 2)
# indicate path to .csv file with average values for each replicate
# Load data and metadata
# data: samples in columns, features in rows
todo_treatments <- read.csv(url("https://raw.githubusercontent.com/ASAGlab/Regulated-IRE1-dependent-decay-RIDD-mediated-reprograming-of-lipid-metabolism-in-cancer/main/Data/Metasyx_MD.csv"))
View(todo_treatments)
table(todo_treatments$Lipid_Class)
uuu <- table(todo_treatments$Lipid_Class)
uuu <- as.data.frame(table(todo_treatments$Lipid_Class))
View(uuu)
uuu$Freq
sum(uuu$Freq)
798 - 641
######################
###EOGHAN JUP STUFF###
######################
### Load necessary packages
library("TCGAbiolinks")
library("SummarizedExperiment")
library("ggplot2")
library("biomaRt")
library("pheatmap")
#################################################################################
# after first time you download, you can skip the previous steps and start HERE #
#################################################################################
# change path to wherever you saved it
load("C:/Users/alman/Desktop/Eoghan/probando_Eoghan.rda")
# extract needed data from SummarizedExperiment object
# in the downloaded data, theres "Primary solid Tumor", "Solid Tissue Normal" and "Metastatic" labelled samples
tcga_brca_all <- as.data.frame(assay(data))  # gene expression data
brca_subtype <- as.data.frame(data$subtype_BRCA_Subtype_PAM50) #BC subtype, taken from this paper: doi.org/10.1016/j.ccell.2018.03.014
tissue_type <- as.data.frame(data$definition) # tissue type of each sample
# load IRE1_gene_sig (previously copied to your working directory)
breast_IRE1_sig <- read.csv("C:/Users/alman/Desktop/Eoghan/breast_IRE1_sig.csv")
# calculate IRE1 score for each sample
# mean of IRE1 positively correlated genes - mean of negatively correlated
tcga_brca_sig <- tcga_brca_all[as.character(breast_IRE1_sig$ensembl_gene_id),]
IRE1_score_pos <- log2(colMeans(na.omit(tcga_brca_sig[which(breast_IRE1_sig$sig == "TRUE"),])))
IRE1_score_neg <- log2(colMeans(na.omit(tcga_brca_sig[which(breast_IRE1_sig$sig == "FALSE"),])))
IRE1_score <- IRE1_score_pos - IRE1_score_neg
# other UPR sigs
file_list <- list.files(path= "C:/Users/alman/Desktop/Manuscript/TCGA",pattern='.txt', full.names = TRUE)
nombres <- list.files(path= "C:/Users/alman/Desktop/Manuscript/TCGA",pattern='.txt')
signatures <- list()
for (i in 1:length(file_list)){
temp_data <- read.csv(file_list[i], skip = 2)
signatures[i] <- temp_data #for each iteration, bind the new data to the building list
}
# annotate HSYMBOL
library("biomaRt")
listEnsembl(GRCh=38)
listEnsembl(version=104)
ensembl = useMart("ensembl")
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
todo_genes <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol'), mart=ensembl)
tcga_brca_all_ann0t <- merge(tcga_brca_all, todo_genes, by.x=0, by.y=1)
#
signatures_scores <- list()
for (i in 1:length(signatures)){
ind <- which(tcga_brca_all_ann0t$hgnc_symbol %in% signatures[[i]])
ooo <- tcga_brca_all_ann0t[ind,]
score <- list(log2(colMeans(na.omit(ooo[,-c(1,1224)]))))
signatures_scores[i] <- score #for each iteration, bind the new data to the building list
}
names(signatures_scores) <- nombres
### Retrieve JUP expression data (they are annotated with ensembl ID)
genes <- as.data.frame(t(log2(tcga_brca_all[c("ENSG00000062282", "ENSG00000085063", "ENSG00000173801", "ENSG00000135441"),]))) #if you want to check other gene, just change ENSEMBL ID
colnames(genes) <- c("DGAT2", "CD59" , "JUP" , "BLOC1S1" )
# create data frame including all info together
todo_junto <- cbind(genes,
PAM_50 = brca_subtype$`data$subtype_BRCA_Subtype_PAM50`,
tissue_type = tissue_type,
"IRE1 gene sig(Logue et al. 2018)" = IRE1_score,
IRE1_score_neg = IRE1_score_neg,
IRE1_score_pos = IRE1_score_pos,
as.data.frame(signatures_scores))
# now lets plot things
#############################################
##### JUP mRNA expression across subtypes ###
#############################################
# data only for tumor samples
todo_junto_tum <- todo_junto[which(tissue_type$`data$definition` == "Primary solid Tumor"),] # create index with position of tumor samples only
#####################################
### COMPARE JUP EXP VS IRE1 SCORE ###
#####################################
# only for tumor samples
vamonos = function(columna1, columna2) {
p <- ggplot(todo_junto_tum, aes(todo_junto_tum[,columna1], todo_junto_tum[,columna2]))
p + geom_point(aes(colour = todo_junto_tum$PAM_50, size = 2, alpha = 0.5)) +
labs(x = colnames(todo_junto_tum)[columna1], y = colnames(todo_junto_tum)[columna2], element_text(face = "bold", angle = 0)) +
geom_smooth(method="lm", color = "red") + theme(axis.line = element_line(size = 3, colour = "grey80")) +
scale_colour_manual(values = c("darkred", "black", "cyan", "darkblue", "khaki",  "grey50")) +
guides(colour = guide_legend("BC subtypes", override.aes = list(size=5), title.theme = element_text(face = "bold", angle = 0)), size = "none") +
annotate('text', x = max(todo_junto_tum[,columna1])-0.5, y = max(todo_junto_tum[,columna2])-0.5 ,label = paste("R^{2}==", round(cor(todo_junto_tum[,columna1], todo_junto_tum[,columna2]), digits = 4)), parse = TRUE, size=6) +
annotate('text', x = max(todo_junto_tum[,columna1])-0.5, y = max(todo_junto_tum[,columna2])-1.5,label =paste("P-value==",cor.test(todo_junto_tum[,columna1], todo_junto_tum[,columna2])$p.value), parse = TRUE, size=3) +
theme(legend.position = "none")
}
vamonos(12, 1)
todo_junto_tum <- subset(todo_junto_tum, todo_junto_tum$PAM_50 == "Basal")
#or plot them all together to evaluate in 1 look
library(patchwork)
numeros <- c(11,7,12)
tags <- c("A", "B", "C")
counter <- 1
p <- list()
for (i in numeros) {
p[[counter]] <- vamonos(i, 1) + labs(tag = tags[counter])
counter <- counter + 1
}
o <- list()
tags <- c( "D", "E", "F")
counter <- 1
for (i in c(11,7,12)) {
o[[counter]] <- vamonos(i, 2) + labs(tag = tags[counter])
counter <- counter + 1
}
ggplot2::theme_update(plot.tag = element_text(face = "bold", size=24))
colnames(todo_junto_tum)[11] <- "HALLMARK UPR"
colnames(todo_junto_tum)[12] <- "Lhomond et al. 2018 RIDD TARGETS"
p[[1]] + p[[2]] + p[[3]] + plot_layout(ncol = 3)
p[[1]] + p[[2]] + p[[3]] + o[[1]] + o[[2]] + o[[3]] + plot_layout(ncol = 3, nrow = 2)
#####################################
### COMPARE JUP EXP VS IRE1 SCORE ###
#####################################
# only for tumor samples
vamonos = function(columna1, columna2) {
p <- ggplot(todo_junto_tum, aes(todo_junto_tum[,columna1], todo_junto_tum[,columna2]))
p + geom_point(aes(colour = todo_junto_tum$PAM_50, size = 2, alpha = 0.5)) +
labs(x = colnames(todo_junto_tum)[columna1], y = colnames(todo_junto_tum)[columna2], element_text(face = "bold", angle = 0)) +
geom_smooth(method="lm", color = "red") + theme(axis.line = element_line(size = 3, colour = "grey80")) +
scale_colour_manual(values = c("darkred", "black", "cyan", "darkblue", "khaki",  "grey50")) +
guides(colour = guide_legend("BC subtypes", override.aes = list(size=5), title.theme = element_text(face = "bold", angle = 0)), size = "none") +
annotate('text', x = max(todo_junto_tum[,columna1])-0.5, y = max(todo_junto_tum[,columna2])-0.5 ,label = paste("R^{2}==", round(cor(todo_junto_tum[,columna1], todo_junto_tum[,columna2]), digits = 4)), parse = TRUE, size=6) +
annotate('text', x = max(todo_junto_tum[,columna1])-0.5, y = max(todo_junto_tum[,columna2])-1,label =paste("P-value==",cor.test(todo_junto_tum[,columna1], todo_junto_tum[,columna2])$p.value), parse = TRUE, size=3) +
theme(legend.position = "none")
}
o <- list()
tags <- c( "D", "E", "F")
counter <- 1
for (i in c(11,7,12)) {
o[[counter]] <- vamonos(i, 2) + labs(tag = tags[counter])
counter <- counter + 1
}
p[[1]] + p[[2]] + p[[3]] + o[[1]] + o[[2]] + o[[3]] + plot_layout(ncol = 3, nrow = 2)
# indicate path to .csv file with average values for each replicate
# Load data and metadata
# data: samples in columns, features in rows
todo_treatments <- read.csv(url("https://raw.githubusercontent.com/ASAGlab/Regulated-IRE1-dependent-decay-RIDD-mediated-reprograming-of-lipid-metabolism-in-cancer/main/Data/Metasyx_MD.csv"))
uuu <- as.data.frame(table(todo_treatments$Lipid_Class))
798 - sum(uuu$Freq)
View(uuu)
sum(uuu$Freq)
library(shiny); runApp('GitHub/RShiny_TCGA-BRCA/corrApp.R')
runApp('D:/Shiny/stockVis')
MANIFEST <- read.delim("~/MANIFEST.txt")
View(MANIFEST)
ooo <- read.delim(url("https://media.githubusercontent.com/media/xaitorx/RShiny_TCGA-BRCA/main/data/tcga_brca_all_X.txt?token=AKRVMBRDESVQ6DQMSPFAN4DBSQMUM"))
View(ooo)
ooo <- read.delim(url("https://media.githubusercontent.com/media/xaitorx/RShiny_TCGA-BRCA/main/data/tcga_brca_all_X.txt?token=AKRVMBRDESVQ6DQMSPFAN4DBSQMUM"), header = TRUE, sep="\t")
#################################################################################
# after first time you download, you can skip the previous steps and start HERE #
#################################################################################
# change path to wherever you saved it
load("C:/Users/alman/Desktop/Eoghan/probando_Eoghan.rda")
# extract needed data from SummarizedExperiment object
# in the downloaded data, theres "Primary solid Tumor", "Solid Tissue Normal" and "Metastatic" labelled samples
tcga_brca_all <- as.data.frame(assay(data))  # gene expression data
library("SummarizedExperiment")
library("ggplot2")
library("biomaRt")
library("pheatmap")
library("RCurl")
# extract needed data from SummarizedExperiment object
# in the downloaded data, theres "Primary solid Tumor", "Solid Tissue Normal" and "Metastatic" labelled samples
tcga_brca_all <- as.data.frame(assay(data))  # gene expression data
brca_subtype <- as.data.frame(data$subtype_BRCA_Subtype_PAM50) #BC subtype, taken from this paper: doi.org/10.1016/j.ccell.2018.03.014
tissue_type <- as.data.frame(data$definition) # tissue type of each sample
View(tcga_brca_all)
View(tcga_brca_all)
ooo <- as.data.frame(t(tcga_brca_all))
View(ooo)
tcga_brca_all_X <- read.delim("~/GitHub/RShiny_TCGA-BRCA/data/tcga_brca_all_X.txt", row.names=1)
View(tcga_brca_all_X)
getwd()
write.table(ooo[1:10,], "probando.txt", sep = " ", dec = ".", row.names = TRUE, col.names = TRUE)
uuu <- read.delim("probando.txt", sep = " ", dec = ".", row.names = 1, header = TRUE)
uuu <- read.delim("probando.txt", sep = "", dec = ".", row.names = 1, header = TRUE)
#################################################################################
# after first time you download, you can skip the previous steps and start HERE #
#################################################################################
# change path to wherever you saved it
load("C:/Users/alman/Desktop/Eoghan/probando_Eoghan.rda")
# extract needed data from SummarizedExperiment object
# in the downloaded data, theres "Primary solid Tumor", "Solid Tissue Normal" and "Metastatic" labelled samples
tcga_brca_all <- as.data.frame(assay(data))  # gene expression data
brca_subtype <- as.data.frame(data$subtype_BRCA_Subtype_PAM50) #BC subtype, taken from this paper: doi.org/10.1016/j.ccell.2018.03.014
tissue_type <- as.data.frame(data$definition) # tissue type of each sample
View(brca_subtype)
View(tcga_brca_all)
ooo <- as.data.frame(t(tcga_brca_all))
ccc <- cbind(ooo, tissue_type, brca_subtype)
View(ccc)
write.table(ccc, "probando.txt", sep = "", dec = ".", row.names = TRUE, col.names = TRUE)
getwd()
TCGA <- read.delim("probando.txt", sep = "", dec = ".", row.names = 1, header = TRUE)
View(TCGA)
#################################################################################
# after first time you download, you can skip the previous steps and start HERE #
#################################################################################
# change path to wherever you saved it
load("C:/Users/alman/Desktop/Eoghan/probando_Eoghan.rda")
# extract needed data from SummarizedExperiment object
# in the downloaded data, theres "Primary solid Tumor", "Solid Tissue Normal" and "Metastatic" labelled samples
tcga_brca_all <- as.data.frame(assay(data))  # gene expression data
brca_subtype <- as.data.frame(data$subtype_BRCA_Subtype_PAM50) #BC subtype, taken from this paper: doi.org/10.1016/j.ccell.2018.03.014
tissue_type <- as.data.frame(data$definition) # tissue type of each sample
# load IRE1_gene_sig (previously copied to your working directory)
breast_IRE1_sig <- read.csv("C:/Users/alman/Desktop/Eoghan/breast_IRE1_sig.csv")
# calculate IRE1 score for each sample
# mean of IRE1 positively correlated genes - mean of negatively correlated
tcga_brca_sig <- tcga_brca_all[as.character(breast_IRE1_sig$ensembl_gene_id),]
IRE1_score_pos <- log2(colMeans(na.omit(tcga_brca_sig[which(breast_IRE1_sig$sig == "TRUE"),])))
IRE1_score_neg <- log2(colMeans(na.omit(tcga_brca_sig[which(breast_IRE1_sig$sig == "FALSE"),])))
IRE1_score <- IRE1_score_pos - IRE1_score_neg
# other UPR sigs
file_list <- list.files(path= "C:/Users/alman/Desktop/Manuscript/TCGA",pattern='.txt', full.names = TRUE)
nombres <- list.files(path= "C:/Users/alman/Desktop/Manuscript/TCGA",pattern='.txt')
signatures <- list()
for (i in 1:length(file_list)){
temp_data <- read.csv(file_list[i], skip = 2)
signatures[i] <- temp_data #for each iteration, bind the new data to the building list
}
# annotate HSYMBOL
library("biomaRt")
listEnsembl(GRCh=38)
listEnsembl(version=104)
ensembl = useMart("ensembl")
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
todo_genes <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol'), mart=ensembl)
tcga_brca_all_ann0t <- merge(tcga_brca_all, todo_genes, by.x=0, by.y=1)
#
signatures_scores <- list()
for (i in 1:length(signatures)){
ind <- which(tcga_brca_all_ann0t$hgnc_symbol %in% signatures[[i]])
ooo <- tcga_brca_all_ann0t[ind,]
score <- list(log2(colMeans(na.omit(ooo[,-c(1,1224)]))))
signatures_scores[i] <- score #for each iteration, bind the new data to the building list
}
names(signatures_scores) <- nombres
### Retrieve JUP expression data (they are annotated with ensembl ID)
genes <- as.data.frame(t(log2(tcga_brca_all[c("ENSG00000062282", "ENSG00000085063", "ENSG00000173801", "ENSG00000135441"),]))) #if you want to check other gene, just change ENSEMBL ID
colnames(genes) <- c("DGAT2", "CD59" , "JUP" , "BLOC1S1" )
# create data frame including all info together
todo_junto <- cbind(genes,
PAM_50 = brca_subtype$`data$subtype_BRCA_Subtype_PAM50`,
tissue_type = tissue_type,
"IRE1 gene sig(Logue et al. 2018)" = IRE1_score,
IRE1_score_neg = IRE1_score_neg,
IRE1_score_pos = IRE1_score_pos,
as.data.frame(signatures_scores))
View(todo_junto)
todo_junto <- todo_junto[,-c(8,9)]
colnames(todo_junto)[6] <- "tissue type"
write.csv(todo_junto, "DGAT2_todo_RNAseq.csv") # save this table if you want, is the data that is plotted in the following graphs
TCGA <- read.csv( "DGAT2_todo_RNAseq.csv")
View(TCGA)
TCGA <- read.csv( "DGAT2_todo_RNAseq.csv", row.names = 1)
View(TCGA)
View(TCGA)
nombres <- c("Primary solid Tumor")
inpuTO <- subset(TCGA, TCGA[[6]] %in% nombres, drop = TRUE)
library(shiny); runApp('GitHub/RShiny_TCGA-BRCA/corrApp.R')
runApp('GitHub/RShiny_TCGA-BRCA/corrApp.R')
runApp('GitHub/RShiny_TCGA-BRCA/corrApp.R')
runApp( "corrApp", display.mode = "showcase")
setwd("~/GitHub/RShiny_TCGA-BRCA")
runApp( "corrApp", display.mode = "showcase")
runApp('corrApp.R')
runApp( "C:/Users/alman/Documents/GitHub/RShiny_TCGA-BRCA/corrApp.R", display.mode = "showcase")
81
runApp( "corrApp", display.mode = "showcase")
runApp( "C:/Users/alman/Documents/GitHub/RShiny_TCGA-BRCA/corrApp.R", display.mode = "showcase")
runApp('corrApp.R')
input$checkGroup <- c(1,2,3,4,5,6)
input$checkGroup <- c(1,2,3,4,5,6)
inpuTTT <- c(1,2,3,4,5,6)
finalInput <- reactive({
subset(TCGA, TCGA[[5]] %in% inpuTTT, drop = TRUE)
})
finalInput()
finalInput <- subset(TCGA, TCGA[[5]] %in% inpuTTT, drop = TRUE)
View(finalInput)
inpuTTT
runApp('corrApp.R')
library(shiny)
ui <- list(checkboxGroupInput("varbox", "Variable", choices = c("x", "y")),
br(), br(),
checkboxGroupInput("datebox", "Date", choices = c("1", "2", "3")),
br(), br(),
actionButton("btn", "update"),
tableOutput("tbl"))
server <- function(input, output) {
sub_fun <- function(dates, variables) {
# sub function to create table
# this does not have any reactive element inside
tmp <- data.frame(day = rep(1:3, 4), x = 1:12, y = 13:24)
tmp[tmp$day %in% dates, c("day", variables), drop = FALSE]
}
get_table <- eventReactive({input$btn; input$datebox}, {
# reactive function to define the configulation
sub_fun(as.character(input$datebox), input$varbox)
})
output$tbl <- renderTable({
get_table()
})
}
runApp(list(ui = ui, server = server))
tmp <- data.frame(day = rep(1:3, 4), x = 1:12, y = 13:24)
View(tmp)
library(shiny)
ui <- list(checkboxGroupInput("checkGroup", label = h3("BRCA subtype"),
choices = list("Luminal A" = "Luminal A", "Luminal B" = "Luminal B", "Her2" = "Her2", "Basal" = "Basal", "Normal" = "Normal", "NA" = "NA"),
selected = c("Luminal A", "Luminal B", "Her2", "Basal", "Normal", "NA")),
br(), br(),
actionButton("btn", "update"),
tableOutput("tbl"))
server <- function(input, output) {
sub_fun <- function(subtypes) {
# sub function to create table
# this does not have any reactive element inside
TCGA[TCGA$PAM_50 %in% subtypes, , drop = FALSE]
}
get_table <- eventReactive({input$checkGroup}, {
# reactive function to define the configulation
sub_fun(as.character(input$checkGroup))
})
output$tbl <- renderTable({
get_table()
})
}
runApp(list(ui = ui, server = server))
View(TCGA)
library(shiny)
ui <- list(checkboxGroupInput("checkGroup", label = h3("BRCA subtype"),
choices = list("Luminal A" = "LumA", "Luminal B" = "LumB", "Her2" = "Her2", "Basal" = "Basal", "Normal" = "Normal", "NA" = "NA"),
selected = c("Luminal A", "Luminal B", "Her2", "Basal", "Normal", "NA")),
br(), br(),
actionButton("btn", "update"),
tableOutput("tbl"))
server <- function(input, output) {
sub_fun <- function(subtypes) {
# sub function to create table
# this does not have any reactive element inside
TCGA[TCGA$PAM_50 %in% subtypes, , drop = FALSE]
}
get_table <- eventReactive({input$checkGroup}, {
# reactive function to define the configulation
sub_fun(as.character(input$checkGroup))
})
output$tbl <- renderTable({
get_table()
})
}
runApp(list(ui = ui, server = server))
runApp('corrApp.R')
runApp('corrApp.R')
runApp('corrApp.R')
runApp('corrApp.R')
runApp('corrApp.R')
colnames(TCGA)
runApp('corrApp.R')
runApp('corrApp.R')
runApp('corrApp.R')
